import tkinter as tk
from tkinter import ttk
import openpyxl
from PIL import Image, ImageTk
import pandas as pd
import numpy as np
import heapq


class AIProject:
    def __init__(self, root):
        self.y = None
        self.x = None
        self.root = root
        self.root.title("AI Team 5")

        # Create a Canvas widget and Scrollbars
        self.canvas = tk.Canvas(self.root, bg="white")
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar_y = tk.Scrollbar(self.root, orient=tk.VERTICAL, command=self.canvas.yview)
        scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=scrollbar_y.set)

        scrollbar_x = tk.Scrollbar(self.root, orient=tk.HORIZONTAL, command=self.canvas.xview)
        scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)
        self.canvas.config(xscrollcommand=scrollbar_x.set)

        # Initialize image and image reference
        self.image = None
        self.tk_image = None

        self.zoom_factor = 1
        self.address_vertex = []
        self.two_dot_coordinates = []
        self.dot_coordinates = []
        self.nodes_coordinates_network = []
        self.line_ids = []
        self.shortestPathArray = []
        self.adjacency_list = []
        self.vertices = []
        self.addresses = []
        self.vertex_coordinates = []
        self.load_image("Suraxani_ss.png")

        # Create Zoom In and Zoom Out buttons
        zoom_in_button = tk.Button(self.root, text="Zoom In", command=self.zoom_in)
        zoom_out_button = tk.Button(self.root, text="Zoom Out", command=self.zoom_out)
        zoom_in_button.pack(side=tk.TOP)
        zoom_out_button.pack(side=tk.TOP)

        # Bind mouse wheel events for zooming
        self.canvas.bind("<Button-4>", self.zoom_in)
        self.canvas.bind("<Button-5>", self.zoom_out)

        start_label = tk.Label(self.root, text="STEP 1")
        start_label.pack(side=tk.TOP)

        go_button = tk.Button(self.root, text="Connect initial nodes", command=self.connect_dots)
        go_button.pack(side=tk.TOP)

        start_label = tk.Label(self.root, text="STEP 2")
        start_label.pack(side=tk.TOP)

        # Start Point Label and TextBox
        start_label = tk.Label(self.root, text="START POINT")
        start_label.pack(side=tk.TOP)

        self.start_addresses_combo_box = ttk.Combobox(root, width=30)
        self.start_addresses_combo_box.pack()

        # End Point Label and TextBox
        end_label = tk.Label(self.root, text="END POINT")
        end_label.pack(side=tk.TOP)

        self.end_addresses_combo_box = ttk.Combobox(root, width=30)
        self.end_addresses_combo_box.pack()

        # "Go!" Button
        go_button = tk.Button(self.root, text="Go!", command=self.runAStar)

        go_button.pack(side=tk.TOP)

        clear_entries_button = tk.Button(self.root, text="Clear entries", command=self.clear_entries)
        clear_entries_button.pack(side=tk.TOP)

        # "Clear coordinates" Button
        clear_button = tk.Button(self.root, text="Clear shortest path", command=self.clear_lines)
        clear_button.pack(side=tk.TOP)

    def get_start_address_cmb_value(self):
        return self.start_addresses_combo_box.get()

    def get_end_address_cmb_value(self):
        return self.end_addresses_combo_box.get()

    def setComboboxValues(self, addresses):
        self.start_addresses_combo_box.configure(values=addresses)
        self.end_addresses_combo_box.configure(values=addresses)

    def clear_lines(self):
        # Delete all lines from the canvas
        for item in self.canvas.find_all():
            if self.canvas.type(item) == "line":
                self.canvas.delete(item)

    def load_image(self, filename):
        # Load the image using PIL (Python Imaging Library)
        self.image = Image.open(filename)
        self.tk_image = ImageTk.PhotoImage(self.image)

        # Display the image on the Canvas
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

    def extract_adjacency_list(self, list):
        for element in list:
            self.adjacency_list.append(element[1:3])

    def get_vertex_num(self, address):
        for e in self.list:
            if e[0] == address:
                return e[1]

    def return_shortest_path_Astar(self, start_vertex, end_vertex):

        data = pd.read_csv('AI_group_project.csv', index_col='Vertices')
        dataframe = pd.DataFrame(data)

        sample_df = dataframe.iloc[:205, ]

        sample_df.index = sample_df.index.astype('int64')

        sample_df.iloc[:, 2:7] = sample_df.iloc[:, 2:7].fillna('1000')

        sample_df.iloc[:, 2:7] = sample_df.iloc[:, 2:7].astype('int64')

        start_point = start_vertex  # 3
        end_point = end_vertex  # Aslandan cavab gelsin

        if end_point in sample_df.index:
            end_lat = sample_df.loc[end_point, 'Latitude']
            end_long = sample_df.loc[end_point, 'Longitude']

            sample_df['length_to_target'] = np.sqrt(
                np.power((end_lat - sample_df['Latitude']), 2) +
                np.power((end_long - sample_df['Longitude']), 2)
            )
        else:
            print("The 'end_point' index is invalid.")

        fced_nods = {1000: [1000, 1000]}

        visit_point = start_point
        visited_list = []
        history_list = []

        while visit_point != end_point:
            list_of_adjacents = []
            if sample_df['Adjacent vertex 1'][visit_point] != 1000:
                list_of_adjacents.append(sample_df['Adjacent vertex 1'][visit_point])
            if sample_df['Adjacent vertex 2'][visit_point] != 1000:
                list_of_adjacents.append(sample_df['Adjacent vertex 2'][visit_point])
            if sample_df['Adjacent vertex 3'][visit_point] != 1000:
                list_of_adjacents.append(sample_df['Adjacent vertex 3'][visit_point])
            if sample_df['Adjacent vertex 4'][visit_point] != 1000:
                list_of_adjacents.append(sample_df['Adjacent vertex 4'][visit_point])
            if sample_df['Adjacent vertex 5'][visit_point] != 1000:
                list_of_adjacents.append(sample_df['Adjacent verte252x 5'][visit_point])

            fced_nods[start_point] = [1000, 0]
            # In this for loop I ssigned ll experienced but not visited nodes their previous node nd their distnce from strt point
            for i in list_of_adjacents:
                # fced_nods[i][0] keeps here its previous node
                if (i not in fced_nods.keys()):
                    # this part signs the length from start to current node
                    fced_nods[i] = visit_point
                    fced_nods[i] = [visit_point, fced_nods[fced_nods[i]][1] + np.sqrt(
                        np.power((sample_df['Latitude'][i] - sample_df['Latitude'][fced_nods[i]]), 2) +
                        np.power((sample_df['Longitude'][i] - sample_df['Longitude'][fced_nods[i]]), 2
                                 ))]

            visited_list.append(visit_point)

            history_list = history_list + list_of_adjacents

            history_list = list(dict.fromkeys(history_list))

            #####!!! YADINDAN CIXMASIN BUR BIR YERE VISITED LISTDE OLANLARI ADJACENT VE KEY LIST-DEN CIXART AY DA DEYESEN HISTORY LIST IDI O

            for m in visited_list:
                if m in history_list:
                    history_list.remove(m)

            # Here we check for visiting point is in the visited list or not in other words this point is visited or not

            min_len = 1000  # this is the length for comparing the length of keys in. This is for for loop which comes next
            needed_key = 2000  # this is assumed for for loop which comes next

            # history_list keeps inside non-visited but faced points
            if visit_point in history_list:
                history_list.remove(visit_point)

            # Here is the DFS is applied for being away from redundant loop
            if len(history_list) == 0:
                print('There is no way!')
                break

            for key_of_hist in history_list:
                if fced_nods[key_of_hist][1] + sample_df['length_to_target'][key_of_hist] < min_len:
                    min_len = fced_nods[key_of_hist][1] + sample_df['length_to_target'][key_of_hist]
                    visit_point = key_of_hist

            if end_point in list_of_adjacents:
                break

        for m in visited_list:
            if m in history_list:
                history_list.remove(m)

        returned_list = []
        loop_argument = end_point
        while loop_argument != start_point:
            returned_list.append(loop_argument)
            loop_argument = fced_nods[loop_argument][0]

        returned_list.append(start_point)
        print(returned_list)
        list_of_pixels = []
        list_of_pixels = [[int(sample_df['Pixel_x'][idx]), int(sample_df['Pixel_y'][idx])] for idx in returned_list]
        return list_of_pixels

    def runAStar(self):
        start_vertex = self.vertex_by_address(self.get_start_address_cmb_value())
        end_vertex = self.vertex_by_address(self.get_end_address_cmb_value())

        self.shortestPathArray = self.return_shortest_path_Astar(start_vertex, end_vertex)
        self.draw_shortest_path()

    def zoom_in(self, event=None):
        # Increase the image size by a factor (e.g., 1.2)
        self.zoom_factor *= 1.2
        self.update_zoom()

    def zoom_out(self, event=None):
        # Decrease the image size by a factor (e.g., 0.8)
        self.zoom_factor *= 0.8
        self.update_zoom()

    def update_zoom(self):
        # Calculate the new size after zooming
        new_width = int(self.image.width * self.zoom_factor)
        new_height = int(self.image.height * self.zoom_factor)

        # Resize the image
        self.image = self.image.resize((new_width, new_height), Image.LANCZOS)
        self.tk_image = ImageTk.PhotoImage(self.image)

        # Delete existing image on the Canvas and display the zoomed image
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

        # Update dot positions based on the new zoom factor
        self.update_dot_positions(self.zoom_factor)

        # Redraw lines after zooming
        self.connect_dots()
        self.draw_shortest_path()

    # ... (Previous methods remain unchanged)

    def update_dot_positions(self, zoom_factor):
        # Update dot positions based on the current zoom factor
        for i in range(len(self.dot_coordinates)):
            self.dot_coordinates[i][0] *= zoom_factor
            self.dot_coordinates[i][1] *= zoom_factor
        self.display_dot()

    def display_dot(self):
        # Clear existing dots
        self.canvas.delete("dot")

        # Create dots at stored coordinates
        dot_size = 3
        for dot_x, dot_y in self.dot_coordinates:
            self.canvas.create_oval(dot_x - dot_size, dot_y - dot_size, dot_x + dot_size, dot_y + dot_size, fill="red",
                                    tags="dot")

    def update_entries(self):
        # Update entries with dot coordinates
        if len(self.dot_coordinates) == 2:
            self.start_x.delete(0, tk.END)
            self.start_x_entry.insert(tk.END, str(self.dot_coordinates[0][0]))
            self.start_y_entry.delete(0, tk.END)
            self.start_y_entry.insert(tk.END, str(self.dot_coordinates[0][1]))
            self.end_x_entry.delete(0, tk.END)
            self.end_x_entry.insert(tk.END, str(self.dot_coordinates[1][0]))
            self.end_y_entry.delete(0, tk.END)
            self.end_y_entry.insert(tk.END, str(self.dot_coordinates[1][1]))

    def add_dot(self, event):
        # Limit to only two dots
        print(event.x, event.y)
        self.dot_coordinates.append([event.x, event.y])
        self.display_dot()

    def add_auto_dot(self, x, y):
        # Limit to only two dots
        self.dot_coordinates.append([x, y])
        self.display_dot()

    def clear_dots(self):
        # Clear all stored dots and entries
        self.dot_coordinates = []
        self.start_x_entry.delete(0, tk.END)
        self.start_y_entry.delete(0, tk.END)
        self.end_x_entry.delete(0, tk.END)
        self.end_y_entry.delete(0, tk.END)
        self.display_dot()

    def update_addresses(self, new_addresses):
        self.addresses.extend(new_addresses)

    def draw_line(self, dot1, dot2, color):
        wTk = self.tk_image.width()
        hTk = self.tk_image.height()
        wIm = self.image.width
        hIm = self.image.height
        x1 = dot1[0] * wTk / wIm
        y1 = dot1[1] * hTk / hIm
        x2 = dot2[0] * wTk / wIm
        y2 = dot2[1] * hTk / hIm
        self.canvas.create_line(x1, y1, x2, y2, fill=color, width=3)

    def display_dots(canvas, coordinates_list):
        dot_size = 3
        for coord in coordinates_list:
            x, y = coord
            canvas.create_oval(x - dot_size, y - dot_size, x + dot_size, y + dot_size, fill="red")

    def draw_shortest_path(self):
        for i in range(0, len(self.shortestPathArray) - 1):
            wTk = self.tk_image.width()
            hTk = self.tk_image.height()
            wIm = self.image.width
            hIm = self.image.height
            x1 = self.shortestPathArray[i][0] * wTk / wIm
            y1 = self.shortestPathArray[i][1] * hTk / hIm
            x2 = self.shortestPathArray[i + 1][0] * wTk / wIm
            y2 = self.shortestPathArray[i + 1][1] * hTk / hIm
            self.draw_line([x1, y1], [x2, y2], 'blue')

    def connect_dots(self):
        for [vertex, neighbors] in self.adjacency_list:
            for neighbor in neighbors:
                if not self.neighbor_exists(vertex):
                    continue

                vertex_coords = self.get_vertex_coordinates(vertex)
                neighbor_coords = self.get_vertex_coordinates(neighbor)
                if vertex_coords is not None and neighbor_coords is not None:
                    wTk = self.tk_image.width()
                    hTk = self.tk_image.height()
                    wIm = self.image.width
                    hIm = self.image.height
                    x1 = vertex_coords[0] * wTk / wIm
                    y1 = vertex_coords[1] * hTk / hIm
                    x2 = neighbor_coords[0] * wTk / wIm
                    y2 = neighbor_coords[1] * hTk / hIm
                    self.draw_line([x1, y1], [x2, y2], 'light green')

    def execute_A_Start(self, startVertex, endVertex):
        # TO DO
        return []

    def vertex_by_address(self, address):
        for e in self.address_vertex:
            if e[0] == address:
                return e[1]

    def get_vertex_world_coordinates(self, vertex):
        a = []
        for e in app.vertex_coordinates:
            if e[0] == vertex:
                a.append(e[1][0])
                a.append(e[1][1])
        return a

    def neighbor_exists(self, vertex):

        for element in self.vertices:
            if element == vertex:
                return True

        return False

    def get_vertex_coordinates(self, vertex):
        for e in self.nodes_coordinates_network:
            if e[0] == vertex:
                return e[1]

    def get_dot_coordinates(self, canvas):
        dot_coordinates = []

        # Iterate through all canvas items
        for item in self.canvas.find_all():
            # Check if the item is an oval (dot)
            if self.canvas.type(item) == "oval":
                # Get the coordinates of the oval's bounding box
                x1, y1, x2, y2 = canvas.coords(item)
                # Calculate the center of the oval
                dot_x = (x1 + x2) / 2
                dot_y = (y1 + y2) / 2
                dot_coordinates.append((dot_x, dot_y))

        return dot_coordinates

    def zoom(self, scale):
        # Get the current size of the image
        width, height = self.image.size

        # Calculate the new size after zooming
        new_width = int(width * scale)
        new_height = int(height * scale)

        # Resize the image
        self.image = self.image.resize((new_width, new_height), Image.LANCZOS)
        self.tk_image = ImageTk.PhotoImage(self.image)

        # Delete existing image on the Canvas and display the zoomed image
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

        # Redraw lines after zooming

    def clear_entries(self):
        self.start_addresses_combo_box.set("")
        self.end_addresses_combo_box.set("")

    def get_coordinates(event):
        x, y = event.x, event.y
        print(f"Dot placed at coordinates ({x}, {y})")


if __name__ == "__main__":
    two_dots_coordinates = []
    dotsCount = 2
    root = tk.Tk()
    app = AIProject(root)
    app.canvas.bind("<Button-1>", app.add_dot)  # Left-click to add dots

    wb = openpyxl.load_workbook('prepared_data.xlsx')
    ws = wb.active
    ws = wb['Worksheet']

    my_list = []
    new_adjacency_list = []  # [1, [1, 2, 3, 4]]
    extracted_list = []
    vertex_pixel_coords = []  # [50, [200, 300]]
    new_addresses = []  # ['', '', '']
    address_vertex = []  # ['wefar', []]
    vertices = []

    for value in ws.iter_rows(
            min_row=2, max_row=206, min_col=1, max_col=11,
            values_only=True):
        my_list.append(value)

    new_list = []

    for e in my_list:
        new_list.append(list(e))

    for e in new_list:
        adj_list = []
        for i in range(4, 9):
            if e[i] is not None:
                adj_list.append(e[i])
        app.vertex_coordinates.append([e[1], [e[2], e[3]]])
        vertices.append(e[1])
        new_addresses.append(e[0])
        address_vertex.append([e[0], e[1]])
        vertex_pixel_coords.append([e[1], [e[9], e[10]]])
        new_adjacency_list.append([e[1], adj_list])
        extracted_list.append([e[0], e[1], e[2], e[3], adj_list, e[9], e[10]])

    for e in vertex_pixel_coords:
        app.add_auto_dot(e[1][0], e[1][1])

    app.address_vertex = address_vertex
    app.nodes_coordinates_network = vertex_pixel_coords
    app.adjacency_list = new_adjacency_list
    app.vertices = vertices
    app.setComboboxValues(new_addresses)

    root.mainloop()
